# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
.env
recordings/

# Claude
CLAUDE.md
CLAUDE.md.backup
.claude/

# rapsberry
display/example
display/test*.py
lib/



# C extensions
*.so
*.o
Sense_HAT_C_Pi/**/main
Sense_HAT_C_Pi/**/LPS22HB
Sense_HAT_C_Pi/**/SHTC3

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
# lib/  # Todd: Commenting out so the frontend works. If you need this to exclude some python files, uncomment it and be VERY specific with your path
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
log.txt
logs


# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache


# PyBuilder
target/

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Environments

.venv
env/
venv/
ENV/
env.bak/
venv.bak/
*.bak
*.old
*.new


# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

.DS_Store

# Node.js dependencies
node_modules/
**/node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json.backup*

# Frontend build outputs
.next/
out/

